import os
import re
from subprocess import DEVNULL, Popen

VERBOSE = 1
SATOUTPUT = 1
p = print if VERBOSE else lambda *args: None

CADICAL_PATH = f"{os.environ['HOME']}/b/cadical/build/cadical"
TIME_PATH = "RunTimeSummarise.out"
MATSUICONDITION_PATH = "MatsuiCondition.out"


def satsolver(ifilename, ofilename):
    # https://github.com/arminbiere/cadical/blob/e71bd58937e6513f71bd8c93d91578785c592721/src/cadical.hpp#L478
    with open(ofilename, "+w") as f:
        out = f if SATOUTPUT else DEVNULL
        child = Popen([CADICAL_PATH, "-q", ifilename], stdout=out)
        child.wait()
        return child.returncode == 10


def CountClausesInSequentialEncoding(n, k):
    """
    n: mainVarNum
    k: cardinalitycons
    """
    if k > 0:
        return 1 + (k - 1) + (n - 2) * 3 + (k - 1) * (n - 2) * 2 + 1
    else:
        return n


def grep(pattern, path):
    with open(path) as f:
        content = f.read()
    return re.match(pattern, content)


def CountClausesForMatsuiStrategy(n, k, l, r, m):
    count = 0
    if m > 0:
        if (l == 0) and (r < n - 1):
            for _ in range(1, r + 1):
                count += 1
        elif (l > 0) and (r == n - 1):
            for _ in range(0, k - m):
                count += 1
            for _ in range(0, k - m + 1):
                count += 1
        elif (l > 0) and (r < n - 1):
            for _ in range(0, k - m):
                count += 1
    if m == 0:
        for _ in range(l, r + 1):
            count += 1
    return count


# fmt: off
P = [
    0, 16, 32, 48,
    1, 17, 33, 49,
    2, 18, 34, 50,
    3, 19, 35, 51,
    4, 20, 36, 52,
    5, 21, 37, 53,
    6, 22, 38, 54,
    7, 23, 39, 55,
    8, 24, 40, 56,
    9, 25, 41, 57,
    10, 26, 42, 58,
    11, 27, 43, 59,
    12, 28, 44, 60,
    13, 29, 45, 61,
    14, 30, 46, 62,
    15, 31, 47, 63,
 ]

SymbolicCNFConstraintForSbox55 = [  # Differential Probability PRESENT (55)
    [1, 9, 0, 0, 0, 1, 9, 0, 9, 9, 9],
    [1, 0, 1, 9, 0, 1, 1, 9, 9, 9, 9],
    [1, 1, 0, 9, 1, 1, 0, 9, 9, 9, 9],
    [1, 0, 9, 0, 9, 1, 0, 0, 9, 9, 9],
    [0, 9, 1, 1, 9, 1, 0, 1, 9, 9, 9],
    [9, 0, 1, 1, 9, 1, 1, 0, 1, 9, 9],
    [9, 1, 0, 1, 1, 9, 0, 0, 1, 9, 9],
    [9, 1, 0, 9, 0, 9, 0, 0, 0, 9, 9],
    [0, 9, 0, 9, 0, 0, 1, 0, 9, 9, 9],
    [9, 0, 1, 0, 1, 0, 9, 1, 9, 9, 9],
    [9, 0, 1, 0, 9, 1, 1, 1, 9, 9, 9],
    [9, 1, 0, 9, 9, 0, 9, 1, 0, 9, 9],
    [9, 1, 1, 0, 9, 9, 0, 9, 0, 9, 9],
    [9, 1, 9, 9, 1, 9, 0, 1, 0, 9, 9],
    [9, 1, 0, 1, 0, 9, 1, 0, 1, 9, 9],
    [0, 0, 9, 1, 0, 9, 0, 9, 0, 9, 9],
    [9, 0, 0, 9, 0, 9, 1, 0, 0, 9, 9],
    [9, 0, 1, 1, 1, 9, 0, 0, 1, 9, 9],
    [9, 1, 0, 0, 9, 0, 1, 1, 9, 9, 9],
    [9, 9, 9, 9, 0, 0, 0, 0, 9, 9, 1],
    [0, 0, 9, 9, 0, 0, 9, 0, 9, 9, 1],
    [9, 1, 0, 0, 1, 1, 9, 1, 9, 9, 9],
    [9, 0, 0, 9, 1, 9, 1, 9, 1, 9, 9],
    [0, 1, 9, 1, 0, 9, 1, 1, 9, 9, 9],
    [9, 1, 0, 9, 9, 1, 1, 9, 0, 9, 9],
    [0, 1, 1, 9, 9, 9, 9, 0, 0, 9, 9],
    [9, 1, 1, 9, 0, 9, 0, 9, 1, 9, 9],
    [0, 0, 1, 9, 1, 0, 0, 9, 9, 9, 9],
    [9, 9, 9, 0, 9, 0, 0, 9, 0, 9, 1],
    [0, 1, 1, 9, 9, 9, 9, 1, 1, 9, 9],
    [9, 0, 0, 0, 9, 1, 0, 9, 0, 9, 9],
    [1, 9, 1, 1, 0, 9, 1, 9, 9, 9, 9],
    [9, 9, 9, 1, 1, 0, 1, 9, 0, 9, 9],
    [1, 0, 0, 1, 9, 9, 9, 1, 9, 9, 9],
    [1, 1, 9, 1, 1, 9, 0, 9, 9, 9, 9],
    [9, 1, 1, 9, 1, 9, 1, 9, 1, 9, 9],
    [9, 9, 9, 1, 0, 1, 0, 1, 9, 9, 9],
    [9, 9, 9, 1, 1, 1, 1, 9, 1, 9, 9],
    [9, 0, 1, 9, 0, 9, 0, 0, 0, 9, 9],
    [9, 0, 0, 9, 1, 9, 0, 0, 0, 9, 9],
    [0, 9, 0, 9, 9, 0, 0, 0, 9, 1, 9],
    [9, 0, 1, 1, 9, 9, 9, 1, 0, 9, 9],
    [1, 9, 1, 0, 1, 9, 9, 9, 0, 9, 9],
    [1, 0, 0, 0, 9, 9, 9, 0, 9, 9, 9],
    [0, 0, 9, 9, 1, 9, 1, 9, 0, 9, 9],
    [9, 0, 1, 9, 1, 1, 9, 9, 0, 9, 9],
    [9, 9, 9, 0, 0, 9, 0, 9, 1, 9, 9],
    [0, 0, 0, 9, 9, 9, 9, 9, 1, 9, 9],
    [9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 0],
    [9, 9, 9, 0, 0, 9, 1, 9, 0, 9, 9],
    [9, 1, 9, 0, 9, 9, 9, 0, 0, 9, 9],
    [9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 0],
    [9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 0],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 1],
    [9, 0, 0, 9, 0, 9, 0, 9, 1, 9, 9],
]

SymbolicCNFConstraintForSbox43 = [  # Differential PRESENT (43)
    [1, 0, 1, 9, 0, 1, 1, 9, 9],
    [9, 0, 0, 9, 1, 0, 1, 0, 9],
    [0, 9, 9, 1, 1, 1, 1, 0, 9],
    [9, 1, 0, 0, 9, 0, 1, 1, 9],
    [1, 0, 1, 9, 1, 1, 0, 0, 9],
    [1, 1, 0, 9, 0, 1, 1, 0, 9],
    [1, 1, 0, 9, 1, 1, 0, 9, 9],
    [0, 0, 1, 1, 1, 9, 0, 9, 9],
    [9, 1, 0, 1, 1, 1, 1, 9, 9],
    [9, 0, 1, 0, 1, 9, 1, 1, 9],
    [9, 1, 0, 0, 1, 1, 9, 1, 9],
    [0, 0, 0, 9, 1, 9, 1, 9, 9],
    [9, 0, 1, 0, 9, 0, 0, 1, 9],
    [9, 1, 0, 0, 0, 0, 9, 1, 9],
    [9, 1, 1, 0, 0, 9, 0, 9, 9],
    [9, 0, 1, 0, 9, 1, 1, 1, 9],
    [0, 0, 1, 9, 1, 0, 0, 9, 9],
    [9, 1, 1, 1, 1, 0, 1, 9, 9],
    [9, 0, 1, 1, 1, 1, 1, 9, 9],
    [0, 9, 0, 9, 9, 0, 0, 0, 1],
    [0, 1, 0, 9, 0, 0, 1, 9, 9],
    [0, 1, 1, 9, 0, 9, 0, 0, 9],
    [1, 1, 9, 0, 1, 9, 1, 1, 9],
    [0, 1, 0, 1, 9, 1, 1, 9, 9],
    [0, 1, 1, 9, 0, 9, 1, 1, 9],
    [9, 1, 1, 0, 1, 9, 1, 0, 9],
    [0, 1, 1, 9, 1, 9, 0, 1, 9],
    [9, 0, 0, 0, 1, 9, 9, 0, 9],
    [9, 9, 9, 9, 0, 0, 0, 0, 1],
    [9, 9, 9, 1, 0, 1, 0, 1, 9],
    [1, 9, 1, 1, 0, 9, 1, 9, 9],
    [0, 0, 9, 9, 0, 0, 9, 0, 1],
    [1, 0, 0, 1, 9, 9, 9, 1, 9],
    [1, 1, 9, 1, 1, 9, 0, 9, 9],
    [9, 0, 0, 9, 0, 9, 0, 1, 9],
    [9, 9, 9, 0, 0, 1, 0, 0, 9],
    [9, 1, 9, 9, 9, 9, 9, 9, 0],
    [0, 0, 0, 0, 9, 9, 9, 9, 1],
    [0, 0, 0, 1, 9, 9, 9, 0, 9],
    [9, 0, 0, 0, 9, 9, 1, 0, 9],
    [9, 9, 1, 9, 9, 9, 9, 9, 0],
    [9, 9, 9, 9, 9, 9, 9, 1, 0],
    [1, 9, 9, 9, 9, 9, 9, 9, 0],
]
# fmt:on
